// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelEase.Infrastructure.Persistence.Context;

#nullable disable

namespace TravelEase.Infrastructure.Migrations
{
    [DbContext(typeof(TravelEaseDbContext))]
    [Migration("20250625085125_ReAddSeedersWithoutBookingAndReview")]
    partial class ReAddSeedersWithoutBookingAndReview
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "RoomTypesId");

                    b.HasIndex("RoomTypesId");

                    b.ToTable("RoomTypeAmenities", (string)null);
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostOffice")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6c9cf0e-31a6-4a35-a932-05f1e58f4a01"),
                            CountryCode = "PS",
                            CountryName = "Palestine",
                            Name = "Jerusalem",
                            PostOffice = "JRS001"
                        },
                        new
                        {
                            Id = new Guid("f5f7c2b4-70a1-4b99-b6f2-8e416ab2de02"),
                            CountryCode = "JO",
                            CountryName = "Jordan",
                            Name = "Amman",
                            PostOffice = "AMN002"
                        },
                        new
                        {
                            Id = new Guid("d3be3a21-8eac-48fa-a5f0-6c9e3c53ee03"),
                            CountryCode = "EG",
                            CountryName = "Egypt",
                            Name = "Cairo",
                            PostOffice = "CAI003"
                        });
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Discounts.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Discounts", t =>
                        {
                            t.HasCheckConstraint("CK_Discount_PercentageRange", "[DiscountPercentage] >= 0 AND [DiscountPercentage] <= 100");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("342e5362-4a61-4d11-a7e7-6b01b47e0001"),
                            DiscountPercentage = 10f,
                            FromDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("0af3d54f-214f-4c33-8a9e-2389329e0001"),
                            ToDate = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cb51a724-e4ca-46e9-9e3d-d59f3f770002"),
                            DiscountPercentage = 15f,
                            FromDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("b4fca5e3-2e10-4b85-9f98-0b16d50c0004"),
                            ToDate = new DateTime(2025, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cfe7a21e-344d-4ae3-8a62-7cc89b710003"),
                            DiscountPercentage = 5f,
                            FromDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("cb0f3c22-7a44-44a7-9e43-7cc3e70d0005"),
                            ToDate = new DateTime(2025, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7851f29b-6d7a-4f7c-83ea-4f1b8c9c0004"),
                            DiscountPercentage = 20f,
                            FromDate = new DateTime(2025, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("fbc8e6f6-0fca-4a34-8f9d-41b37a0f0007"),
                            ToDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("246cf7e5-8c03-4cc2-bb6a-7592a15c0005"),
                            DiscountPercentage = 12.5f,
                            FromDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomTypeId = new Guid("1a734e0b-78c3-401e-b8b4-32d129110009"),
                            ToDate = new DateTime(2025, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Hotels.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FloorsNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hotels", t =>
                        {
                            t.HasCheckConstraint("CK_Hotel_RatingRange", "[Rating] >= 0 AND [Rating] <= 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d6d68f6-c6b0-41a9-b6f1-72d7d340b101"),
                            CityId = new Guid("b6c9cf0e-31a6-4a35-a932-05f1e58f4a01"),
                            Description = "A luxury hotel in the heart of Jerusalem.",
                            FloorsNumber = 10,
                            Name = "Jerusalem Grand Hotel",
                            OwnerName = "John Doe",
                            PhoneNumber = "+970212345678",
                            Rating = 4.7f,
                            StreetAddress = "123 Old City St."
                        },
                        new
                        {
                            Id = new Guid("04a5ffeb-9134-4097-9b4e-d4783c194102"),
                            CityId = new Guid("b6c9cf0e-31a6-4a35-a932-05f1e58f4a01"),
                            Description = "Cozy boutique hotel near major landmarks.",
                            FloorsNumber = 5,
                            Name = "Jerusalem Boutique Inn",
                            OwnerName = "Sarah Cohen",
                            PhoneNumber = "+970212345679",
                            Rating = 4.3f,
                            StreetAddress = "45 King David Blvd."
                        },
                        new
                        {
                            Id = new Guid("69702fd3-fb46-4694-b5fc-3de9c8b5a103"),
                            CityId = new Guid("f5f7c2b4-70a1-4b99-b6f2-8e416ab2de02"),
                            Description = "Elegant hotel with modern amenities.",
                            FloorsNumber = 8,
                            Name = "Amman Royal Hotel",
                            OwnerName = "Omar Al-Khatib",
                            PhoneNumber = "+96265123456",
                            Rating = 4.5f,
                            StreetAddress = "12 Rainbow Street"
                        },
                        new
                        {
                            Id = new Guid("b3dd1dce-e79f-4d00-b5e3-f2d4d0a4f104"),
                            CityId = new Guid("d3be3a21-8eac-48fa-a5f0-6c9e3c53ee03"),
                            Description = "Hotel with beautiful Nile river views.",
                            FloorsNumber = 12,
                            Name = "Cairo Nile View",
                            OwnerName = "Fatima Hassan",
                            PhoneNumber = "+20212345678",
                            Rating = 4.2f,
                            StreetAddress = "Nile Corniche"
                        },
                        new
                        {
                            Id = new Guid("fbfc9c27-799b-4d7e-b12a-dbbdc914f105"),
                            CityId = new Guid("f5f7c2b4-70a1-4b99-b6f2-8e416ab2de02"),
                            Description = "Conveniently located hotel in downtown Amman.",
                            FloorsNumber = 7,
                            Name = "Amman City Center Hotel",
                            OwnerName = "Leila Mansour",
                            PhoneNumber = "+96265123457",
                            Rating = 4.1f,
                            StreetAddress = "3 Downtown Rd."
                        });
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_RatingRange", "[Rating] >= 0 AND [Rating] <= 5");
                        });
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.RoomAmenities.RoomAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RoomAmenities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b48fa00c-4f6d-4c91-a973-4cb94c80ec01"),
                            Description = "High-speed wireless internet access available throughout the room.",
                            Name = "Free WiFi"
                        },
                        new
                        {
                            Id = new Guid("f79904be-34aa-41ec-a580-40989e3b3602"),
                            Description = "Individual air conditioning unit for personalized comfort.",
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = new Guid("a11d00f2-4fc6-45f1-bc7a-3de3cc548603"),
                            Description = "42-inch flat screen television with cable channels.",
                            Name = "Flat Screen TV"
                        },
                        new
                        {
                            Id = new Guid("de1c3e3d-85f1-4c4e-9ec8-34de25173a04"),
                            Description = "Daily cleaning service to keep your room tidy.",
                            Name = "Daily Housekeeping"
                        },
                        new
                        {
                            Id = new Guid("e7c8c5ae-4411-4d57-ae1e-0e43a6cc6f05"),
                            Description = "Free parking space available for guests.",
                            Name = "Parking"
                        });
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.RoomTypes.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("RoomTypes", t =>
                        {
                            t.HasCheckConstraint("CK_RoomType_PriceRange", "[PricePerNight] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("0af3d54f-214f-4c33-8a9e-2389329e0001"),
                            Category = "Single",
                            HotelId = new Guid("9d6d68f6-c6b0-41a9-b6f1-72d7d340b101"),
                            PricePerNight = 120m
                        },
                        new
                        {
                            Id = new Guid("0fa4010a-8c8a-4d8d-a6e7-3927c40a0002"),
                            Category = "Double",
                            HotelId = new Guid("9d6d68f6-c6b0-41a9-b6f1-72d7d340b101"),
                            PricePerNight = 200m
                        },
                        new
                        {
                            Id = new Guid("a2b8e135-84ef-4c34-83b1-1f68240b0003"),
                            Category = "Double",
                            HotelId = new Guid("04a5ffeb-9134-4097-9b4e-d4783c194102"),
                            PricePerNight = 180m
                        },
                        new
                        {
                            Id = new Guid("b4fca5e3-2e10-4b85-9f98-0b16d50c0004"),
                            Category = "Suite",
                            HotelId = new Guid("69702fd3-fb46-4694-b5fc-3de9c8b5a103"),
                            PricePerNight = 350m
                        },
                        new
                        {
                            Id = new Guid("cb0f3c22-7a44-44a7-9e43-7cc3e70d0005"),
                            Category = "Double",
                            HotelId = new Guid("b3dd1dce-e79f-4d00-b5e3-f2d4d0a4f104"),
                            PricePerNight = 220m
                        },
                        new
                        {
                            Id = new Guid("de2d1f5a-6237-4e49-8b10-24de1e0e0006"),
                            Category = "Single",
                            HotelId = new Guid("fbfc9c27-799b-4d7e-b12a-dbbdc914f105"),
                            PricePerNight = 110m
                        },
                        new
                        {
                            Id = new Guid("fbc8e6f6-0fca-4a34-8f9d-41b37a0f0007"),
                            Category = "Suite",
                            HotelId = new Guid("fbfc9c27-799b-4d7e-b12a-dbbdc914f105"),
                            PricePerNight = 380m
                        },
                        new
                        {
                            Id = new Guid("0e9a34a0-cf9e-4a41-b27c-96c3b5100008"),
                            Category = "Single",
                            HotelId = new Guid("69702fd3-fb46-4694-b5fc-3de9c8b5a103"),
                            PricePerNight = 130m
                        },
                        new
                        {
                            Id = new Guid("1a734e0b-78c3-401e-b8b4-32d129110009"),
                            Category = "Suite",
                            HotelId = new Guid("04a5ffeb-9134-4097-9b4e-d4783c194102"),
                            PricePerNight = 400m
                        },
                        new
                        {
                            Id = new Guid("2690e45c-015f-4c58-8a33-0db4f3120010"),
                            Category = "Double",
                            HotelId = new Guid("b3dd1dce-e79f-4d00-b5e3-f2d4d0a4f104"),
                            PricePerNight = 210m
                        });
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultsCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("ChildrenCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms", t =>
                        {
                            t.HasCheckConstraint("CK_Room_RatingRange", "[Rating] >= 0 AND [Rating] <= 5");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("b03c67e0-3c3c-4a24-9fa0-9632d693ab01"),
                            AdultsCapacity = 2,
                            ChildrenCapacity = 1,
                            Rating = 4.5f,
                            RoomTypeId = new Guid("0af3d54f-214f-4c33-8a9e-2389329e0001"),
                            View = "Sea View"
                        },
                        new
                        {
                            Id = new Guid("1d2cbcb0-6727-4d3e-8c90-1c7c7e48f482"),
                            AdultsCapacity = 3,
                            ChildrenCapacity = 2,
                            Rating = 4.2f,
                            RoomTypeId = new Guid("0fa4010a-8c8a-4d8d-a6e7-3927c40a0002"),
                            View = "Mountain View"
                        },
                        new
                        {
                            Id = new Guid("e47fcdf4-6355-4ea3-a33f-59ff56ad1f03"),
                            AdultsCapacity = 1,
                            ChildrenCapacity = 0,
                            Rating = 3.8f,
                            RoomTypeId = new Guid("a2b8e135-84ef-4c34-83b1-1f68240b0003"),
                            View = "City View"
                        },
                        new
                        {
                            Id = new Guid("99d8eb70-2190-4238-9f00-22f6e5b5a505"),
                            AdultsCapacity = 2,
                            ChildrenCapacity = 2,
                            Rating = 4.9f,
                            RoomTypeId = new Guid("b4fca5e3-2e10-4b85-9f98-0b16d50c0004"),
                            View = "Pool View"
                        },
                        new
                        {
                            Id = new Guid("10cdbbe9-1e91-4dc5-94e5-cfb6fce5c607"),
                            AdultsCapacity = 4,
                            ChildrenCapacity = 2,
                            Rating = 4f,
                            RoomTypeId = new Guid("cb0f3c22-7a44-44a7-9e43-7cc3e70d0005"),
                            View = "Garden View"
                        });
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoomAmenityRoomType", b =>
                {
                    b.HasOne("TravelEase.Domain.Aggregates.RoomAmenities.RoomAmenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelEase.Domain.Aggregates.RoomTypes.RoomType", null)
                        .WithMany()
                        .HasForeignKey("RoomTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Bookings.Booking", b =>
                {
                    b.HasOne("TravelEase.Domain.Aggregates.Rooms.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelEase.Domain.Aggregates.Users.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Discounts.Discount", b =>
                {
                    b.HasOne("TravelEase.Domain.Aggregates.RoomTypes.RoomType", "RoomType")
                        .WithMany("Discounts")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Hotels.Hotel", b =>
                {
                    b.HasOne("TravelEase.Domain.Aggregates.Cities.City", "City")
                        .WithMany("Hotels")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Reviews.Review", b =>
                {
                    b.HasOne("TravelEase.Domain.Aggregates.Bookings.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("TravelEase.Domain.Aggregates.Reviews.Review", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.RoomTypes.RoomType", b =>
                {
                    b.HasOne("TravelEase.Domain.Aggregates.Hotels.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Rooms.Room", b =>
                {
                    b.HasOne("TravelEase.Domain.Aggregates.RoomTypes.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Bookings.Booking", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Cities.City", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.RoomTypes.RoomType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("TravelEase.Domain.Aggregates.Users.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
